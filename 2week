강의 목표

모바일 프로그래밍 핵심 개념과 크로스플랫폼 원리 이해

기초 수준의 크로스플랫폼 앱 구현

AI 활용 역량 습득

플러터 소개

등장 배경: 기존 네이티브/크로스플랫폼/하이브리드 앱 개발의 한계 극복

장점

하나의 코드로 iOS, Android, Web, Desktop 지원

빠른 컴파일 & 핫 리로드

구글의 적극적인 지원, 풍부한 라이브러리

네이티브 수준의 성능

일관된 UI, 다양한 위젯, 강력한 디버깅

단점

구글 서비스 의존 (서비스 종료 리스크)

잦은 업데이트와 호환성 문제

코드 푸시 기능 부재 (부분적으로 Shorebird로 보완)

Dart 언어 학습 필요, 가독성 문제(위젯 트리)

플러터 개발자 채용 시장 아직 작음

주요 사용 기업: Google, BMW, Nubank, 밀리의 서재, eBay, TikTok 등

→ 이미 글로벌 대기업과 서비스에서 검증된 기술

개발 환경 설정

Git 설치 (버전 관리 및 Flutter 채널 관리 필수)

Stable / Beta / Master 채널 존재

Flutter SDK 설치

macOS, Windows 각각 설치 후 환경 변수 설정

flutter --version 으로 확인

Android Studio 설치

Android SDK 관리, 플랫폼 종속성 제공

VSCode 설치 및 확장팩 추가

Flutter, Awesome Flutter Snippets, Flutter Tree, Error Lens, Material Icon Theme

환경 검증: flutter doctor

자주 쓰는 단축키: 멀티 커서, 코드 이동/복사 등

과제

TIL (Today I Learned) 매일 기록하기

배운 내용을 GitHub에 올려서 잔디 심기

최소 주 1개, 권장 3~4개 → 취업 시 포트폴리오에 도움

AI 활용

Microsoft Copilot 권장 (Windows Copilot 또는 copilot.microsoft.com)

AI 대화 방식 이해:

싱글 턴 vs 멀티 턴

멀티모달: 텍스트, 음성, 이미지 등 다양한 입력 활용

핵심:
이번 주차는 플러터의 장단점·활용사례 이해와 개발 환경(Git, Flutter SDK, IDE) 세팅이 중심이며,
과제로는 GitHub TIL 기록을 통해 습관화 + 잔디 관리가 중요합니다.
